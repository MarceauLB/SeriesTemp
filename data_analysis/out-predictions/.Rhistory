plot(global_google_ts, main = "Time series of each available variable")
plot(GOOGL$open)
ts.plot(GOOGL$GOOGL.Open, main = "Open Prices", col = "blue")
ts.plot(GOOGL$adjusted, main = "Volume", col = "brown")
ts.plot(GOOGL$open, main = "Open Prices", col = "blue")
ts.plot(GOOGL$high, main = "High Prices", col = "green")
ts.plot(GOOGL$low, main = "Low Prices", col = "red")
ts.plot(GOOGL$close, main = "Close Prices", col = "purple")
ts.plot(GOOGL$volume, main = "Adjusted Close Prices", col = "orange")
plot(GOOGL$open, main = "Open Prices", col = "blue")
plot(GOOGL$high, main = "High Prices", col = "green")
plot(GOOGL$low, main = "Low Prices", col = "red")
plot(GOOGL$close, main = "Close Prices", col = "purple")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "orange")
plot(GOOGL$adjusted, main = "Volume", col = "brown")
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
par(mfrow=c(3,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
par(mfrow=c(3,2))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
par(mfrow=c(1,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
par(mfrow=c(1,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
global_google_ts = ts(GOOGL)
plot(global_google_ts, main = "Time series of each available variable")
# Clear the environment
rm(list=ls())
# Load libraries
library(quantmod)
library(tseries)
library(forecast)
library(evd)
# Set Seed
set.seed(13012025)
# Define the ticker symbol
ticker <- "GOOGL"
# Dates
start_date <- "2007-01-01"
end_date <- "2024-12-31"
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# We start by displaying every available time series
names(GOOGL) = c("open","high","low","close","volume","adjusted")
any(is.na(GOOGL)) # no missing value in the time series
par(mfrow=c(1,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
global_google_ts = ts(GOOGL)
plot(global_google_ts, main = "Time series of each available variable")
end_date_training <- "2017-12-31"
#------------------------------------------------------------------------
# Question 2: Exploratory Data Analysis (EDA)
#------------------------------------------------------------------------
# Divising data until 2018 only
start_date <- "2007-01-01"
end_date <- "2018-12-31"
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# Focus on Opening Prices
google_open_prices = GOOGL$open
ts_serie <- ts(google_open_prices)
# Clear the environment
rm(list=ls())
# Load libraries
library(quantmod)
library(tseries)
library(forecast)
library(evd)
# Set Seed
set.seed(13012025)
# Define the ticker symbol
ticker <- "GOOGL"
# Dates
start_date <- "2007-01-01"
end_date <- "2024-12-31"
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# We start by displaying every available time series
names(GOOGL) = c("open","high","low","close","volume","adjusted")
any(is.na(GOOGL)) # no missing value in the time series
par(mfrow=c(1,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
global_google_ts = ts(GOOGL)
plot(global_google_ts, main = "Time series of each available variable")
#------------------------------------------------------------------------
# Question 2: Exploratory Data Analysis (EDA)
#------------------------------------------------------------------------
# Divising data until 2018 only
start_date <- "2007-01-01"
end_date <- "2018-12-31"
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# Focus on Opening Prices
google_open_prices = GOOGL$open
ts_serie <- ts(google_open_prices)
# Advanced Time Series - Project
# Authors:
# JARRY Antoine
# MALLICK GaÃ«l
# MAGHAMES Alexandre
# LE BOT Marceau
# BRAULT Tom
#------------------------------------------------------------------------
# Preliminary settings
#------------------------------------------------------------------------
# Clear the environment
rm(list=ls())
# Load libraries
library(quantmod)
library(tseries)
library(forecast)
library(evd)
# Set Seed
set.seed(13012025)
# Define the ticker symbol
ticker <- "GOOGL"
# Dates
start_date <- "2007-01-01"
end_date <- "2024-12-31"
# We select a large range of dates which could be better for predictions
# in the following
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
#------------------------------------------------------------------------
# Question 1: Data Preprocessing
#------------------------------------------------------------------------
# We start by displaying every available time series
names(GOOGL) = c("open","high","low","close","volume","adjusted")
any(is.na(GOOGL)) # no missing value in the time series
par(mfrow=c(1,1))
plot(GOOGL$open, main = "Open Prices", col = "darkblue")
plot(GOOGL$high, main = "High Prices", col = "darkblue")
plot(GOOGL$low, main = "Low Prices", col = "darkblue")
plot(GOOGL$close, main = "Close Prices", col = "darkblue")
plot(GOOGL$volume, main = "Adjusted Close Prices", col = "darkblue")
plot(GOOGL$adjusted, main = "Volume", col = "darkblue")
global_google_ts = ts(GOOGL)
plot(global_google_ts, main = "Time series of each available variable")
# Except the volume time series, all the other time series exhibit the same general trend.
#------------------------------------------------------------------------
# Question 2: Exploratory Data Analysis (EDA)
#------------------------------------------------------------------------
# Divising data until 2018 only
start_date <- "2007-01-01"
end_date <- "2018-12-31"
# We select a large range of dates which could be better for predictions
# Import data
getSymbols(ticker, src = "yahoo",from=start_date,to=end_date)
# Focus on Opening Prices
google_open_prices = GOOGL$open
ts_serie <- ts(google_open_prices)
global_google_ts = ts(GOOGL)
plot(global_google_ts, main = "Time series of each available variable")
# We start by displaying every available time series
names(GOOGL) = c("open","high","low","close","volume","adjusted")
names(GOOGL) = c("open","high","low","close","volume","adjusted")
# Focus on Opening Prices
google_open_prices = GOOGL$open
ts_serie <- ts(google_open_prices)
plot(ts_serie, main = "Initial time series of Google opening prices", col = "darkblue")
plot(google_open_prices, main = "Initial time series of Google opening prices", col = "darkblue")
# The trend of the time series has gets wigglier as time increases. This means that the variance increases over time
# so we will consider a log-transformation to make the variance constant.
log_ts <- log(ts_serie)
plot(log_ts, main = "Log-transformed time series")
plot(log_ts, main = "Log-transformed time series",col="darkblue")
plot(ts_serie, main = "Initial time series of Google opening prices", col = "darkblue")
plot(google_open_prices, main = "Initial time series of Google opening prices", col = "darkblue")
# Focus on Opening Prices
google_open_prices = GOOGL$open
ts_serie <- ts(google_open_prices)
plot(ts_serie, main = "Initial time series of Google opening prices", col = "darkblue")
plot(google_open_prices, main = "Initial time series of Google opening prices", col = "darkblue")
# The trend of the time series has gets wigglier as time increases. This means that the variance increases over time
# so we will consider a log-transformation to make the variance constant.
log_ts <- log(ts_serie)
plot(log_ts, main = "Log-transformed time series",col="darkblue")
# The trend of the time series has gets wigglier as time increases. This means that the variance increases over time
# so we will consider a log-transformation to make the variance constant.
log_ts <- log(ts_serie)
plot(log_ts, main = "Log-transformed time series",col="darkblue")
### Trend and seasonality analysis
par(mfrow = c(1,2))
acf(log_ts, main = "ACF of the log-transformed time series")
pacf(log_ts, main = "PACF of the log-transformed time series")
# Augmented Dickey-Fuller test:
adf.test(log_ts)
plot(log_ts, main = "Log-transformed time series",col="darkblue")
### Trend and seasonality analysis
par(mfrow = c(1,2))
acf(log_ts, main = "ACF of the log-transformed time series")
pacf(log_ts, main = "PACF of the log-transformed time series")
dev.off()
# Augmented Dickey-Fuller test:
adf.test(log_ts)
# Augmented Dickey-Fuller test:
adf.test(log_ts)
# KPSS test
kpss.test(log_ts)
# We difference it
serie_diff <- diff(log_ts)
plot(serie_diff, main = "Time series of the log-returns of Google opening prices")
plot(serie_diff, main = "Time series of the log-returns of Google opening prices",col="darkblue")
# ADF test
adf.test(serie_diff)
# KPSS test
kpss.test(serie_diff)
par(mfrow = c(1,2))
# ADF test
adf.test(serie_diff)
# We difference it
serie_diff <- diff(log_ts)
plot(serie_diff, main = "Time series of the log-returns of Google opening prices",col="darkblue")
# ADF test
adf.test(serie_diff)
# KPSS test
kpss.test(serie_diff)
par(mfrow = c(1,2))
acf(serie_diff,lag.max = 100)
pacf(serie_diff,lag.max = 100)
dev.off()
spec.pgram(serie_diff, col = "darkblue", main = "Smoothing periodogram of the log-returns of Google opening prices",
span = 4)
spec.pgram(serie_diff, col = "darkblue", main = "Smoothing periodogram of the log-returns of Google opening prices",
span = 4)
# Check best ARIMA model for different values of p and q based on AIC and BIC
p_max = 5
q_max = 5
AIC_arima = matrix(0,p_max,q_max,byrow=T)
BIC_arima = matrix(0,p_max,q_max,byrow=T)
setwd("~/00_Ensai/serie_temporelle/SeriesTemp/data_analysis_r/out-predictions/")
#################################################################################
# PrÃ©dictions for ARIMA, GARCH and LSTM (5, 22 et 250 jours)
#################################################################################
#Lire les donnÃ©es Ã  partir du fichier CSV
data_arima <- read.csv("forecast_predictions_arima.csv")
data_garch <- read.csv("forecast_predictions_garch.csv")
data_lstm <- read.csv("forecast_predictions_lstm.csv")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend(x=3.5,y=50, legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 2. Plot for 22 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:22], type="l",
ylim=c(min(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22])),
max(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22]))),
col="darkblue",
main="Actual vs Predicted for 22 Steps",
xlab="Time",
ylab="Value")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 2. Plot for 22 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:22], type="l",
ylim=c(min(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22])),
max(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22]))),
col="darkblue",
main="Actual vs Predicted for 22 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred22[1:22], col="darkred", type="l")
lines(data_garch$pred22[1:22], col="darkgreen", type="l")
lines(data_lstm$pred22[1:22], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 3. Plot for 250 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:250], type="l",
ylim=c(min(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250], data_lstm$pred250[1:250])),
max(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250],data_lstm$pred250[1:250]))),
col="darkblue",
main="Actual vs Predicted for 250 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred250[1:250], col="darkred", type="l")
lines(data_garch$pred250[1:250], col="darkgreen", type="l")
lines(data_lstm$pred250[1:250], col="darkorange", type="l")
legend(x=150,y = 30, legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
setwd("~/00_Ensai/serie_temporelle/SeriesTemp/data_analysis_r/out-predictions/")
#################################################################################
# PrÃ©dictions for ARIMA, GARCH and LSTM (5, 22 et 250 jours)
#################################################################################
#Lire les donnÃ©es Ã  partir du fichier CSV
data_arima <- read.csv("forecast_predictions_arima.csv")
data_garch <- read.csv("forecast_predictions_garch.csv")
data_lstm <- read.csv("forecast_predictions_lstm.csv")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
#################################################################################
# PrÃ©dictions for ARIMA, GARCH and LSTM (5, 22 et 250 jours)
#################################################################################
#Lire les donnÃ©es Ã  partir du fichier CSV
data_arima <- read.csv("forecast_predictions_arima.csv")
data_garch <- read.csv("forecast_predictions_garch.csv")
data_lstm <- read.csv("forecast_predictions_lstm.csv")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 2. Plot for 22 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:22], type="l",
ylim=c(min(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22])),
max(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22]))),
col="darkblue",
main="Actual vs Predicted for 22 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred22[1:22], col="darkred", type="l")
lines(data_garch$pred22[1:22], col="darkgreen", type="l")
lines(data_lstm$pred22[1:22], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 3. Plot for 250 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:250], type="l",
ylim=c(min(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250], data_lstm$pred250[1:250])),
max(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250],data_lstm$pred250[1:250]))),
col="darkblue",
main="Actual vs Predicted for 250 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred250[1:250], col="darkred", type="l")
lines(data_garch$pred250[1:250], col="darkgreen", type="l")
lines(data_lstm$pred250[1:250], col="darkorange", type="l")
legend(x=150,y = 30, legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#################################################################################
# PrÃ©dictions for ARIMA, GARCH and LSTM (5, 22 et 250 jours)
#################################################################################
#Lire les donnÃ©es Ã  partir du fichier CSV
data_arima <- read.csv("forecast_predictions_arima.csv")
data_garch <- read.csv("forecast_predictions_garch.csv")
data_lstm <- read.csv("forecast_predictions_lstm.csv")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend(x=3.5,y=50, legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 2. Plot for 22 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:22], type="l",
ylim=c(min(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22])),
max(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22]))),
col="darkblue",
main="Actual vs Predicted for 22 Steps",
xlab="Time",
ylab="Value")
#------------------------------------------------------------------------
# 1. Plot for 5 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:5], type="l",
ylim=c(min(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5], data_lstm$pred5[1:5])),
max(c(data_arima$pred5[1:5], data_arima$test_data[1:5], data_garch$pred5[1:5],data_lstm$pred5[1:5]))),
col="darkblue",
main="Actual vs Predicted for 5 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred5[1:5], col="darkred", type="l")
lines(data_garch$pred5[1:5], col="darkgreen", type="l")
lines(data_lstm$pred5[1:5], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 2. Plot for 22 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:22], type="l",
ylim=c(min(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22])),
max(c(data_arima$test_data[1:22], data_arima$pred22[1:22], data_garch$pred22[1:22], data_lstm$pred22[1:22]))),
col="darkblue",
main="Actual vs Predicted for 22 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred22[1:22], col="darkred", type="l")
lines(data_garch$pred22[1:22], col="darkgreen", type="l")
lines(data_lstm$pred22[1:22], col="darkorange", type="l")
legend("bottomleft", legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
#------------------------------------------------------------------------
# 3. Plot for 250 values
#------------------------------------------------------------------------
plot(data_arima$test_data[1:250], type="l",
ylim=c(min(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250], data_lstm$pred250[1:250])),
max(c(data_arima$test_data[1:250], data_arima$pred250[1:250], data_garch$pred250[1:250],data_lstm$pred250[1:250]))),
col="darkblue",
main="Actual vs Predicted for 250 Steps",
xlab="Time",
ylab="Value")
lines(data_arima$pred250[1:250], col="darkred", type="l")
lines(data_garch$pred250[1:250], col="darkgreen", type="l")
lines(data_lstm$pred250[1:250], col="darkorange", type="l")
legend(x=150,y = 30, legend=c("Actual (Test Data)", "ARIMA Prediction", "GARCH Prediction","LSTM Prediction"),
col=c("darkblue", "darkred", "darkgreen","darkorange"), lty=1, cex=0.9)
# Check best FARIMA model for different values of p and q based on AIC and BIC
p_max <- 7
q_max <- 5
AIC_farima <- matrix(0,p_max,q_max)
